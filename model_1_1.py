# -*- coding: utf-8 -*-
"""Model 1.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OKKvSMCsuT_ci9q5Y3jc0SWNv6ljT4NQ
"""

import pandas as pd
import numpy as np

df=pd.read_csv('/content/cleaned_discretized_tourism_data.csv')

# Convert categorical features to numerical for correlation analysis
from sklearn.preprocessing import LabelEncoder
label_encoders = {}
for col in ['Country', 'VisitMode', 'AttractionType', 'Attraction']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

import pandas as pd

# Assuming your dataset is loaded into the DataFrame 'df'
# Display the first few rows of the dataset
print("Initial Dataset:")
display(df.head())

# Step 1: Create Interaction Features
# Step 1: Convert relevant columns to strings before creating interaction features
df['VisitMode'] = df['VisitMode'].astype(str)
df['Country'] = df['Country'].astype(str)
df['VisitMonth'] = df['VisitMonth'].astype(str)

# Display the updated DataFrame with the new interaction features
print("\nDataset with Interaction Features:")

import pandas as pd

# Assuming the DataFrame 'df' is already loaded and preprocessed

# Step 1: One-Hot Encode 'AttractionType', 'Country', and 'Attraction'
one_hot_attraction_type = pd.get_dummies(df['AttractionType'], prefix='AttractionType').astype(int)
one_hot_country = pd.get_dummies(df['Country'], prefix='Country').astype(int)
one_hot_attraction = pd.get_dummies(df['Attraction'], prefix='Attraction').astype(int)

# Step 2: Add the one-hot encoded columns to the original DataFrame
df_one_hot = pd.concat([df, one_hot_attraction_type, one_hot_country, one_hot_attraction], axis=1)

# Step 3: Create one-hot vectors for each row as lists with integer representation (1/0)
df_one_hot['AttractionType_OneHot'] = one_hot_attraction_type.values.tolist()
df_one_hot['Country_OneHot'] = one_hot_country.values.tolist()
df_one_hot['Attraction_OneHot'] = one_hot_attraction.values.tolist()

# Display the updated DataFrame with one-hot vectors
print("\nDataset with One-Hot Encoded Vectors (using 1/0):")
print(df_one_hot.head())

# Step 4: Display the integer one-hot vectors for verification
print("\nOne-Hot Encoded Vectors for 'AttractionType':")
print(df_one_hot[['AttractionType', 'AttractionType_OneHot']].head())

print("\nOne-Hot Encoded Vectors for 'Country':")
print(df_one_hot[['Country', 'Country_OneHot']].head())

print("\nOne-Hot Encoded Vectors for 'Attraction':")
print(df_one_hot[['Attraction', 'Attraction_OneHot']].head())

import pandas as pd

# Assuming df_one_hot is already preprocessed and contains the following:
# - 'VisitMode' (numerical)
# - 'VisitMonth' (numerical)
# - 'Country_OneHot' (one-hot encoded as a list of integers)

# Step 1: Convert 'VisitMode' and 'VisitMonth' to numerical labels (if not already done)
df_one_hot['VisitMode'] = df_one_hot['VisitMode'].astype(int)
df_one_hot['VisitMonth'] = df_one_hot['VisitMonth'].astype(int)

# Step 2: Create the interaction feature 'VisitMode_VisitMonth' as before
df_one_hot['VisitMode_VisitMonth'] = df_one_hot['VisitMode'] * df_one_hot['VisitMonth']

# Step 3: Generate a single interaction feature 'VisitMode_Country'
# Multiply 'VisitMode' with the one-hot encoded 'Country_OneHot' vector to create a new vector
df_one_hot['VisitMode_Country'] = df_one_hot.apply(
    lambda row: [row['VisitMode'] * val for val in row['Country_OneHot']], axis=1
)

# Display the updated DataFrame with the new interaction feature
print("\nUpdated DataFrame with Interaction Features:")
print(df_one_hot[['VisitMode', 'Country_OneHot', 'VisitMode_Country']].head())

# Display the interaction feature for verification
print("\nExample of 'VisitMode_Country' Interaction Feature:")
print(df_one_hot['VisitMode_Country'].head())

# Step 1: Retain only the relevant columns
columns_to_keep = [
    'AttractionType',
    'Country_OneHot',
    'VisitMode',
    'VisitMonth',
    'VisitMode_VisitMonth',
    'VisitMode_Country'
]

# Filter the DataFrame to only include the columns we want
final_df_cleaned = df_one_hot[columns_to_keep]

# Display the cleaned DataFrame
print("Cleaned Dataset with Only Selected Columns:")
print(final_df_cleaned.head())

# Confirm the shape of the cleaned DataFrame
print("\nShape of the Cleaned DataFrame:", final_df_cleaned.shape)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Flatten the one-hot encoded vectors
df_one_hot_expanded = pd.DataFrame(df_one_hot['Country_OneHot'].tolist(), index=df_one_hot.index)
df_one_hot_expanded.columns = [f'Country_{i}' for i in range(df_one_hot_expanded.shape[1])]

df_interaction_expanded = pd.DataFrame(df_one_hot['VisitMode_Country'].tolist(), index=df_one_hot.index)
df_interaction_expanded.columns = [f'VisitMode_Country_{i}' for i in range(df_interaction_expanded.shape[1])]

# Step 2: Merge flattened vectors back into the original DataFrame
df_final = pd.concat([df_one_hot, df_one_hot_expanded, df_interaction_expanded], axis=1)

# Step 3: Prepare features (X) and target (y)

features = ['VisitMode', 'VisitMonth', 'VisitMode_VisitMonth'] + \
           [f'Country_{i}' for i in range(df_one_hot_expanded.shape[1])] + \
           [f'VisitMode_Country_{i}' for i in range(df_interaction_expanded.shape[1])]

X = df_final[features]


y = df_final['AttractionType']

# Step 4: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train the RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Make predictions and evaluate the model
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import numpy as np
import pandas as pd

def predict_top2_attraction_types(model, visit_mode, visit_month, country, label_encoders, X):
    # Step 1: Encode 'visit_mode' and 'country' using the saved LabelEncoders
    if visit_mode not in label_encoders['VisitMode'].classes_:
        raise ValueError(f"Invalid visit mode: {visit_mode}")
    if country not in label_encoders['Country'].classes_:
        raise ValueError(f"Invalid country: {country}")

    visit_mode_encoded = label_encoders['VisitMode'].transform([visit_mode])[0]
    country_encoded = label_encoders['Country'].transform([country])[0]

    # Step 2: Generate one-hot encoding for 'Country'
    country_one_hot = [0] * len(label_encoders['Country'].classes_)
    country_one_hot[country_encoded] = 1

    # Step 3: Generate interaction feature 'VisitMode_Country'
    visit_mode_country_interaction = [visit_mode_encoded * val for val in country_one_hot]

    # Step 4: Create the interaction feature 'VisitMode_VisitMonth'
    visit_mode_visit_month_interaction = visit_mode_encoded * visit_month

    # Step 5: Assemble the feature vector for prediction
    input_data = pd.DataFrame([[
        visit_mode_encoded,           # VisitMode
        visit_month,                  # VisitMonth
        visit_mode_visit_month_interaction, # VisitMode_VisitMonth
        *country_one_hot,             # Country one-hot encoding
        *visit_mode_country_interaction # VisitMode_Country interaction
    ]], columns=[
        'VisitMode', 'VisitMonth', 'VisitMode_VisitMonth'
    ] + [f'Country_{i}' for i in range(len(country_one_hot))] +
        [f'VisitMode_Country_{i}' for i in range(len(visit_mode_country_interaction))]
    )

    # Step 6: Ensure columns are in the same order as during training
    input_data = input_data.reindex(columns=X.columns, fill_value=0)

    # Step 7: Predict the probabilities for each class
    probabilities = model.predict_proba(input_data)[0]

    # Step 8: Get the indices of the top 2 highest probabilities
    top2_indices = np.argsort(probabilities)[-2:][::-1]  # Get top 2 indices sorted in descending order

    # Step 9: Convert indices to actual labels
    top2_attractions = label_encoders['AttractionType'].inverse_transform(top2_indices)

    # Print the top 2 predictions
    print(f"Top 1 Prediction: {top2_attractions[0]}")
    print(f"Top 2 Prediction: {top2_attractions[1]}")

    return top2_attractions

# Example usage
visit_mode = 'Couples'
visit_month = 7
country = 'France'
top2_predictions = predict_top2_attraction_types(model, visit_mode, visit_month, country, label_encoders, X)

import pickle

with open('label_encoders.pkl', 'wb') as f:
    pickle.dump(label_encoders, f)

with open('random_forest_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

with open('X.pkl', 'wb') as model_file:
    pickle.dump(X, model_file)

print(models)